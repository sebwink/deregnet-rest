# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from deregnet_rest.models.base_model_ import Model
from deregnet_rest import util


class GraphInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, num_nodes: int=None, num_edges: int=None, id: str=None, time_of_upload: str=None):  # noqa: E501
        """GraphInfo - a model defined in Swagger

        :param name: The name of this GraphInfo.  # noqa: E501
        :type name: str
        :param description: The description of this GraphInfo.  # noqa: E501
        :type description: str
        :param num_nodes: The num_nodes of this GraphInfo.  # noqa: E501
        :type num_nodes: int
        :param num_edges: The num_edges of this GraphInfo.  # noqa: E501
        :type num_edges: int
        :param id: The id of this GraphInfo.  # noqa: E501
        :type id: str
        :param time_of_upload: The time_of_upload of this GraphInfo.  # noqa: E501
        :type time_of_upload: str
        """
        self.swagger_types = {
            'name': str,
            'description': str,
            'num_nodes': int,
            'num_edges': int,
            'id': str,
            'time_of_upload': str
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'num_nodes': 'num_nodes',
            'num_edges': 'num_edges',
            'id': 'id',
            'time_of_upload': 'time_of_upload'
        }

        self._name = name
        self._description = description
        self._num_nodes = num_nodes
        self._num_edges = num_edges
        self._id = id
        self._time_of_upload = time_of_upload

    @classmethod
    def from_dict(cls, dikt) -> 'GraphInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GraphInfo of this GraphInfo.  # noqa: E501
        :rtype: GraphInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this GraphInfo.

        Name of the graph  # noqa: E501

        :return: The name of this GraphInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this GraphInfo.

        Name of the graph  # noqa: E501

        :param name: The name of this GraphInfo.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this GraphInfo.

        Description of the graph  # noqa: E501

        :return: The description of this GraphInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this GraphInfo.

        Description of the graph  # noqa: E501

        :param description: The description of this GraphInfo.
        :type description: str
        """

        self._description = description

    @property
    def num_nodes(self) -> int:
        """Gets the num_nodes of this GraphInfo.

        Number of nodes in the graph  # noqa: E501

        :return: The num_nodes of this GraphInfo.
        :rtype: int
        """
        return self._num_nodes

    @num_nodes.setter
    def num_nodes(self, num_nodes: int):
        """Sets the num_nodes of this GraphInfo.

        Number of nodes in the graph  # noqa: E501

        :param num_nodes: The num_nodes of this GraphInfo.
        :type num_nodes: int
        """
        if num_nodes is None:
            raise ValueError("Invalid value for `num_nodes`, must not be `None`")  # noqa: E501

        self._num_nodes = num_nodes

    @property
    def num_edges(self) -> int:
        """Gets the num_edges of this GraphInfo.

        Number of edges in the graph  # noqa: E501

        :return: The num_edges of this GraphInfo.
        :rtype: int
        """
        return self._num_edges

    @num_edges.setter
    def num_edges(self, num_edges: int):
        """Sets the num_edges of this GraphInfo.

        Number of edges in the graph  # noqa: E501

        :param num_edges: The num_edges of this GraphInfo.
        :type num_edges: int
        """
        if num_edges is None:
            raise ValueError("Invalid value for `num_edges`, must not be `None`")  # noqa: E501

        self._num_edges = num_edges

    @property
    def id(self) -> str:
        """Gets the id of this GraphInfo.

        Id of the graph  # noqa: E501

        :return: The id of this GraphInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this GraphInfo.

        Id of the graph  # noqa: E501

        :param id: The id of this GraphInfo.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def time_of_upload(self) -> str:
        """Gets the time_of_upload of this GraphInfo.

        Time of upload  # noqa: E501

        :return: The time_of_upload of this GraphInfo.
        :rtype: str
        """
        return self._time_of_upload

    @time_of_upload.setter
    def time_of_upload(self, time_of_upload: str):
        """Sets the time_of_upload of this GraphInfo.

        Time of upload  # noqa: E501

        :param time_of_upload: The time_of_upload of this GraphInfo.
        :type time_of_upload: str
        """
        if time_of_upload is None:
            raise ValueError("Invalid value for `time_of_upload`, must not be `None`")  # noqa: E501

        self._time_of_upload = time_of_upload
