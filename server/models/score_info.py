# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from deregnet_rest.models.base_model_ import Model
from deregnet_rest import util


class ScoreInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, size: int=None, id: str=None, time_of_upload: str=None):  # noqa: E501
        """ScoreInfo - a model defined in Swagger

        :param description: The description of this ScoreInfo.  # noqa: E501
        :type description: str
        :param size: The size of this ScoreInfo.  # noqa: E501
        :type size: int
        :param id: The id of this ScoreInfo.  # noqa: E501
        :type id: str
        :param time_of_upload: The time_of_upload of this ScoreInfo.  # noqa: E501
        :type time_of_upload: str
        """
        self.swagger_types = {
            'description': str,
            'size': int,
            'id': str,
            'time_of_upload': str
        }

        self.attribute_map = {
            'description': 'description',
            'size': 'size',
            'id': 'id',
            'time_of_upload': 'time_of_upload'
        }

        self._description = description
        self._size = size
        self._id = id
        self._time_of_upload = time_of_upload

    @classmethod
    def from_dict(cls, dikt) -> 'ScoreInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ScoreInfo of this ScoreInfo.  # noqa: E501
        :rtype: ScoreInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self) -> str:
        """Gets the description of this ScoreInfo.

        Description of the score  # noqa: E501

        :return: The description of this ScoreInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ScoreInfo.

        Description of the score  # noqa: E501

        :param description: The description of this ScoreInfo.
        :type description: str
        """

        self._description = description

    @property
    def size(self) -> int:
        """Gets the size of this ScoreInfo.

        Number of scored nodes  # noqa: E501

        :return: The size of this ScoreInfo.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size: int):
        """Sets the size of this ScoreInfo.

        Number of scored nodes  # noqa: E501

        :param size: The size of this ScoreInfo.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def id(self) -> str:
        """Gets the id of this ScoreInfo.

        Id of the score object  # noqa: E501

        :return: The id of this ScoreInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ScoreInfo.

        Id of the score object  # noqa: E501

        :param id: The id of this ScoreInfo.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def time_of_upload(self) -> str:
        """Gets the time_of_upload of this ScoreInfo.

        Time of upload  # noqa: E501

        :return: The time_of_upload of this ScoreInfo.
        :rtype: str
        """
        return self._time_of_upload

    @time_of_upload.setter
    def time_of_upload(self, time_of_upload: str):
        """Sets the time_of_upload of this ScoreInfo.

        Time of upload  # noqa: E501

        :param time_of_upload: The time_of_upload of this ScoreInfo.
        :type time_of_upload: str
        """
        if time_of_upload is None:
            raise ValueError("Invalid value for `time_of_upload`, must not be `None`")  # noqa: E501

        self._time_of_upload = time_of_upload
